using System.Collections.Generic;
using System.Linq;

namespace WalletWasabi.Fluent.ViewModels.Wallets.Labels;

public static class LabelRanking
{
	public static IDictionary<string, int> Rank(RankInput rankInput, Intent intent)
	{
		var labelPool = new Dictionary<string, int>(); // int: score.

		// Make recent and receive labels count more for the current wallet
		var multiplier = 100;
		foreach (var label in rankInput.ReceiveLabels.Reverse().SelectMany(x => x.Labels))
		{
			var score = (intent == Intent.Receive ? 100 : 1) * multiplier;
			if (!labelPool.TryAdd(label, score))
			{
				labelPool[label] += score;
			}

			if (multiplier > 1)
			{
				multiplier--;
			}
		}

		// Receive addresses should be more dominant.
		foreach (var label in rankInput.ReceiveAddressLabels.SelectMany(x => x.Labels))
		{
			var score = intent == Intent.Receive ? 100 : 1;
			if (!labelPool.TryAdd(label, score))
			{
				labelPool[label] += score;
			}
		}

		// Change addresses shouldn't be much dominant, but should be present.
		foreach (var label in rankInput.ChangeAddressLabels.SelectMany(x => x.Labels))
		{
			var score = 1;
			if (!labelPool.TryAdd(label, score))
			{
				labelPool[label] += score;
			}
		}

		multiplier = 100; // Make recent labels count more.
		foreach (var label in rankInput.TransactionLabels.SelectMany(x => x.Labels).Reverse())
		{
			var score = (intent == Intent.Send ? 100 : 1) * multiplier;
			if (!labelPool.TryAdd(label, score))
			{
				labelPool[label] += score;
			}

			if (multiplier > 1)
			{
				multiplier--;
			}
		}

		var unwantedLabelSuggestions = new[]
		{
			"test", // Often people use the string "test" as a label. It obviously cannot be a real label, just a test label.
			"zerolink mixed coin", // Obsolated autogenerated label from old WW1 versions.
			"zerolink change", // Obsolated autogenerated label from old WW1 versions.
			"zerolink dequeued change" // Obsolated autogenerated label from old WW1 versions.
		};

		var labels = labelPool
			.Where(x =>
				!unwantedLabelSuggestions.Any(y => y.Equals(x.Key, StringComparison.OrdinalIgnoreCase))
				&& !x.Key.StartsWith("change of (", StringComparison.OrdinalIgnoreCase)); // An obsolated autogenerated label pattern was from old WW1 versions starting with "change of (".

		return labels
			.GroupBy(x => x.Key)
			.Select(
				x => new
				{
					Label = x.Key,
					Score = x.Sum(y => y.Value)
				}).ToDictionary(arg => arg.Label, arg => arg.Score);
	}
}
